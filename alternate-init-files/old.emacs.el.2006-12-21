;;;; .emacs.el - for windows

(load "~/comp/tkbconfig/lib/emacs/tkb-macros.el")
(setq tkb-xemacs-p (string-match "xemacs" emacs-version))
(load "~/comp/tkbconfig/lib/emacs/tkb-mail.el")


(define-prefix-command 'tkb-date-map)
(global-set-key "\C-cd" 'tkb-date-map)
(global-set-key "\C-cdi" 'tkb-insert-iso-date)
(global-set-key "\C-cdp" 'tkb-insert-date)
(global-set-key "\C-c\t" 'indent-relative)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; tkb-time.el -- Time options
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; $ProjectHeader: tkbconfig 0.5 Tue, 09 May 2000 20:50:39 -0400 tkb $
;;; $Id: tkb-time.el 1.1 Sun, 26 Mar 2000 15:10:50 -0500 tkb $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Calendar
(setq calendar-week-start-day 1)
(setq calendar-longitude -80.1627)
(setq calendar-latitude 39.458)

(setq display-time-string-forms
      '(12-hours ":" minutes " " (downcase am-pm) (if mail " Mail") load))


(defun tkb-get-date-from-user ()
  ;; Warning: doesn't validate date!
  (let ((date  (read-from-minibuffer
		"Date: " (format-time-string "%Y-%m-%d"))))
    (cond ((string-match		;YYYY-MM-DD
	    "\\([0-9]\\{4\\}\\)-\\([0-1][0-9]\\)-\\([0-3][0-9]\\)"
	    date)
	   (let ((year (string-to-int (match-string 1 date)))
		 (mon  (string-to-int (match-string 2 date)))
		 (dom  (string-to-int (match-string 3 date))))
	     (encode-time 0 0 0 dom mon year)))
	  ((string-match		;MM-DD-YYYY
	    "\\([0-1][0-9]\\)[-/]\\([0-3][0-9]\\)[-/]\\([0-9]\\{4\\}\\)"
	    date)
	   (let ((year (string-to-int (match-string 3 date)))
		 (mon  (string-to-int (match-string 1 date)))
		 (dom  (string-to-int (match-string 2 date))))
	     (encode-time 0 0 0 dom mon year)))
	  
	  (t
	   (error "invalid date: %s" date)))))

(defun tkb-parse-usa-date (d)
  ;; Warning: doesn't validate date!
  (if (not (string-match
	    "\\([0-1][0-9]\\)[-/]\\([0-3][0-9]\\)[-/]\\([0-9]\\{4\\}\\)"
	    d))
      (error "invalid date: %s" d)
    (let ((year (string-to-int (match-string 3 d)))
	  (mon  (string-to-int (match-string 1 d)))
	  (dom  (string-to-int (match-string 2 d))))
      (encode-time 0 0 0 dom mon year))))

(defun tkb-insert-date (prefix)
  (interactive "P")
  (let ((time (if prefix (tkb-get-date-from-user) (current-time))))
    (insert (tkb-timestamp nil time))))

(defun date ()
  (interactive)
  (message "Date: %s" (tkb-timestamp)))

(defun tkb-insert-iso-date (prefix)
  (interactive "P")
  (let ((time (if prefix (tkb-get-date-from-user) (current-time))))
    (insert (format-time-string "%Y/%2m/%2d" time))))
(when nil
  (global-set-key "\C-cd" 'tkb-insert-iso-date))

(defun tkb-insert-timestamp (&optional use-time)
  "Insert a timestamp to my liking."
  (interactive)
  (insert (tkb-timestamp use-time)))     ;Did have "Last modified: "

(defvar tkb-timestamp-format-regexp
  (concat "\\(monday\\|tuesday\\|wednesday\\|"
	  "thursday\\|friday\\|staturday\\|sunday\\)" ;the days
	  ",[ \t]+"
	  "[0-9]+"			;the day of the month
	  "[ \t]+"
	  "\\(january\\|february\\|march\\|april\\|may\\|june\\|july\\|"
	  "august\\|september\\|october\\|november\\|december\\)"
	  "[ \t]+"
	  "[0-9]+"
  "Regular expression that matches my prefered timestamp format."))

(defun tkb-replace-timestamp ()
  "Replace a timestamp if the text following point matches my preferred
timestamp format"
  (interactive)
  (cond ((looking-at tkb-timestamp-format-regexp)
	 (let* ((beg (match-beginning 0))
		(end (match-end 0))
		(origin (copy-marker beg nil)))
	 (delete-region beg end)
	 (tkb-insert-timestamp)
	 (goto-char origin)))))

(defun tkb-timestamp (&optional use-time time)
  "Return a timestamp to my liking.  Append clock time if USE-TIME is true.
If TIME is true, use it for the time to format."
  (let* ((time      (if time time (current-time)))
      (hhmm         (format-time-string "%I:%M %p" time))
      (dow          (format-time-string "%A" time))
      (day          (int-to-string (string-to-int
                         (format-time-string "%e" time))))
      (month   (format-time-string "%B" time))
      (year         (format-time-string "%Y" time))
      (result       (concat dow ", " day " " month " " year))
      )
    (if use-time
     (concat result " at " hhmm)
      result)))


;; diary
;; this causes the diary never to display, for some reason.
;(add-hook 'diary-display-hook 'appt-make-list)

(defconst tkb-date-regexp "\\(\\([A-Za-z]+\\), *\\([0-9]+\\) *\\([A-Za-z]+\\) *\\([0-9]+\\).*\\)")

(defun tkb-date-month-number (name)
  (let ((n (position name ["Jan" "Feb" "Mar" "Apr" "May" "Jun"
			   "Jul" "Aug" "Sep" "Oct" "Nov" "Dec"]
		     :test (function string-equal))))
    (if n
	(1+ n)
      n)))


;;; end of tkb-time.el


(push "c:/home/tkb/local/emacs" load-path)
(push "c:/emacs/emacs-21.3/share/emacs/site-lisp/w3m" load-path)

(setq common-lisp-hyperspec-root 
     "file:///c:/sw/doc/common-lisp/hyperspec/HyperSpec/")

(when nil
  ;; This seems to work ok.
  (setq scheme-program-name
	"c:/sw/versions/cygwin/chicken/2.3/bin/csi.exe -:c"))
(progn
  ;; http://groups.google.com/group/comp.lang.lisp/msg/67465d6d6423712e
  (defun lispdoc ()
    "searches lispdoc.com for SYMBOL, which is by default the symbol
currently under the curser"
    (interactive)
    (let* ((word-at-point (word-at-point))
	   (symbol-at-point (symbol-at-point))
	   (default (symbol-name symbol-at-point))
	   (inp (read-from-minibuffer
		 (if (or word-at-point symbol-at-point)
		     (concat "Symbol (default " default "): ")
                   "Symbol (no default): "))))
      (if (and (string= inp "") (not word-at-point) (not
						     symbol-at-point))
	  (message "you didn't enter a symbol!")
        (let ((search-type (read-from-minibuffer
                            "full-text (f) or basic (b) search (default b)? ")))
          (browse-url (concat "http://lispdoc.com?q="
                              (if (string= inp "")
                                  default
				inp)
                              "&search="
                              (if (string-equal search-type "f")
                                  "full+text+search"
				"basic+search"))))))))

(progn
  ;; See http://cooking-with-lisp.blogspot.com/2005/07/w3m-customization.html
  ;; for good customizations

  ;; http://www.cliki.net/Bits%20from%20Mark%20Triggs's%20.emacs
  (autoload 'w3m "w3m" "Interface for w3m on Emacs." t)
  (autoload 'w3m-browse-url "w3m" "Browse web pages using w3m inside Emacs." t)
  (setq w3m-symbol 'w3m-default-symbol)
  ;;(setq w3m-key-binding 'info)

  (eval-after-load "w3m"
    '(progn
       (setq browse-url-browser-function 'w3m-browse-url)
       (define-key w3m-mode-map "T" 'w3m-view-this-url-new-session)
       (global-set-key "\C-cj" 'w3m-goto-url-new-session))))

(progn
  ;; From http://www.cliki.net/Bits%20from%20Mark%20Triggs's%20.emacs
  (defadvice common-lisp-hyperspec (around hyperspec-lookup-w3m () activate)
    "Browse the Common Lisp HyperSpec using w3m. When leaving w3m, restore the original window configuration."
    (let* ((window-configuration (current-window-configuration))
	   (browse-url-browser-function
	    `(lambda (url new-window)
	       (unless (member (current-buffer) (w3m-list-buffers))
		 (select-window (split-window-vertically)))
	       (w3m-browse-url url nil)
	       (let ((hs-map (copy-keymap w3m-mode-map)))
		 (define-key hs-map (kbd "q")
		   (lambda ()
		     (interactive)
		     (kill-buffer nil)
		     (set-window-configuration ,window-configuration)))
		 (use-local-map hs-map))))) ad-do-it))

  (defun lisp-reindent-defun ()
    "Indent the current defun."
    (interactive)
    (save-excursion
      (beginning-of-defun)
      (indent-sexp)))

  ;; Highlight "FIXME" comments (defface fixme-face '((t (:weight bold :box (:line-width 2 :color "orange")))) "The faced used to show FIXME lines.")

  (defun show-fixme-lines (&optional arg)
    "Emphasise FIXME comments. If ARG is positive, enable highlighting. If ARG is negative, disable highlighting. Otherwise, toggle highlighting."
    (interactive)
    (if (or (and (not arg) (assoc "FIXME" hi-lock-interactive-patterns))
	    (and arg (minusp arg)))
	(unhighlight-regexp "FIXME")
      (highlight-phrase "FIXME" 'fixme-face))))


(setq
 browse-url-browser-function 'browse-url-generic
 browse-url-generic-program "c:/Program Files/Mozilla Firefox/firefox.exe")

(require 'cl)

(defun yank-secondary ()
  "Insert the secondary selection at point.
  Moves point to the end of the inserted text.  Does not change mark."
  (interactive) (insert (x-get-selection 'SECONDARY)))

(defun tkb-is-executable-in-dir (file dir)
  (let ((pathname (expand-file-name file dir)))
    (if (file-executable-p pathname)
	pathname)))

(defun tkb-find-executable (exe path)
  (if (and (file-name-absolute-p exe)
	   (file-executable-p exe))
      exe
    (loop for dir in path
	  thereis (tkb-is-executable-in-dir exe dir))))

(when-exec-found "mount.exe"
  (require 'cygwin-mount)
  (cygwin-mount-activate))

(when t
  (if (and (boundp 'Info-directory-list) Info-directory-list)
      (progn 
	(push "c:/cygwin/usr/share/info/" Info-directory-list)
	(push "c:/cygwin/usr/info/" Info-directory-list))
    (progn 
	(push "c:/cygwin/usr/share/info/" Info-default-directory-list)
	(push "c:/cygwin/usr/info/" Info-default-directory-list))))

;; use ucs-insert to insert unicode characters.
(defun tkb-next-sexp ()
  (interactive)
  (backward-up-list -1))

(global-set-key "\C-c)" 'tkb-next-sexp)




(when nil
  (progn 
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)))

(require 'cl)

(fset 'tkb-select-to-record-line
   [tab ?\C-[ ?\C-f ?\C-[ ?\C-f ?% ?t ?y ?p ?e ?, ?\C-[ ?\C-k ?\C-[ ?  backspace ?\C-[ ?\C-k ?\C-[ ?m ?\C-y ?  tab ?\C-a ?\C-n])


(defun tkb-copy-buffer-name (whole)
  (interactive "P")
  (message "whole: %s numeric: %d" whole (prefix-numeric-value whole))
  (let ((fn (buffer-file-name)))
    (kill-new (if whole fn (file-name-nondirectory fn)))))
(global-set-key "\C-cy" 'tkb-copy-buffer-name)
(defun tkb-copy-downcase-buffer-name (whole)
  (interactive "P")
  (message "whole: %s numeric: %d" whole (prefix-numeric-value whole))
  (let* ((fn (buffer-file-name))
	 (fn (if whole fn (file-name-nondirectory fn))))
    (kill-new (downcase fn))))
(global-set-key "\C-cY" 'tkb-copy-downcase-buffer-name)


(defun tkb-lower-to-register (register start end)
  (interactive "cLowercase to register: \nr")
  (set-register register (downcase (buffer-substring start end))))
(global-set-key "\C-c*" 'tkb-lower-to-register)

(setq archive-zip-extract '("unzip" "-qq" "-c"))
(setq archive-zip-use-pkzip nil)
(load-library "~/comp/tkbconfig/lib/emacs/gforth.el")
(setq forth-program-name "c:/sw/versions/cygwin/gforth/0.6.2/bin/gforth-0.6.2.exe")

;;; Connects as sysdba.
(defun tkb-oracle ()
  (interactive)
  (let ((sql-user "sys")
        ;(sql-database "nspcp")
        (sql-oracle-options (list "as sysdba")))
    (sql-oracle)))

(load-library "tksql.el")

(when nil 
  (load-library "sql-indent.el")
  (load-library "structured-regexp.el")
  (load-library "plsql.el")
  (setq auto-mode-alist (append '(("\\.pls$"  . plsql-mode)
				  ("\\.sql$"  . plsql-mode)
				  ("\\.pks$"  . plsql-mode)
				  ("\\.pkb$"  . plsql-mode))
				auto-mode-alist)))
(when nil
  (progn
    (load-library "pls-mode.el")
    (defun tkb-pls-mode-hook ()
      (interactive)
      ;;(setq tab-width 4)
      (setq indent-tabs-mode nil))
    (add-hook 'pls-mode-hook 'tkb-pls-mode-hook)

    (setq auto-mode-alist (append '(("\\.pls$"  . pls-mode)
				    ("\\.sql$"  . pls-mode)
				    ("\\.pks$"  . pls-mode)
				    ("\\.pkb$"  . pls-mode)
				    ("\\.pld$"  . diana-mode))
				  auto-mode-alist))))

(defun tkb-insert-iso-date ()
  (interactive)
  (insert (format-time-string "%Y/%2m/%2d")))


;;;; Python
(autoload 'python-mode "python-mode.el")
(pushnew '("\\.py$" . python-mode) auto-mode-alist)
(setq py-python-command "c:/python24/python.exe")




;;;; SLIME Setup

(when nil 

  (setq tkb-slime-setup-done nil)
  (defun tkb-slime-setup ()
    (unless tkb-slime-setup-done
      (setq tkb-slime-setup-done t)
      (interactive)
      (setq load-path (append (list "c:/sw/versions/slime/cvs/slime")
			      load-path))
      (require 'slime)
      (add-hook 'lisp-mode-hook (lambda () (slime-mode t)))
      (add-hook 'inferior-lisp-mode-hook (lambda () (inferior-slime-mode t)))
      ;; If you don't want eldoc-like behavior, comment out the following line
      (slime-autodoc-mode)))


  ;; GNU CLISP - http://clisp.cons.org/
  (defun clisp-start-with-slime ()
    (interactive)
    (shell-command (concat "c:/sw/versions/clisp-bin/clisp-2.35/full/lisp.exe "
			   "-B c:/sw/versions/clisp-bin/clisp-2.35/full/ "
			   "-M c:/sw/versions/clisp-bin/clisp-2.35/full/lispinit.mem "
			   "-i c:/home/tkb/.slime.lisp "
			   "-ansi -q&")))

  ;; use slime-connect then read file.
  (defun tkb-clisp ()
    (interactive)
    (clisp-start-with-slime)
    (sit-for 3)
    (message "sliming?")
    (tkb-slime-setup)
    (slime-connect "127.0.0.1" 4005 t)))

(when t
  (add-to-list 'load-path
	       ;;"c:/sw/versions/slime/cvs/slime/"
	       ;;"c:/sw/src/slime-2006-01-30/"
	       "c:/sw/src/slime-2006-11-15/slime/"
	       )
  (setq inferior-lisp-program
	;;"c:/sw/versions/clisp-bin/local/clisp-2.35/clisp.exe"
	;;"c:/sw/versions/clisp-bin/local/clisp-2.38/clisp.exe -q")
	;;"c:/Program Files/Steel Bank Common Lisp/0.9.17/sbcl.exe")
	;; "c:/PROGRA~1/STEELB~1/099D9D~1.17/sbcl.exe"
	"c:/PROGRA~1/STEELB~1/1.0/sbcl.exe"
	)
  (setq slime-lisp-implementations
	'((sbcl ("c:/PROGRA~1/STEELB~1/1.0/sbcl.exe"))
	  (clisp ("c:/sw/versions/clisp-bin/clisp-2.41/clisp.exe"))))
  (require 'slime)
  (slime-setup))

;;__________________________________________________________________________


(defun tkb-insert-buffer-filename ()
  (interactive)
  (insert (file-name-nondirectory
	   (buffer-file-name))))

(defun tkb-insert-buffer-filename-sans-extension ()
  (interactive)
  (insert (file-name-sans-extension
	   (file-name-nondirectory (buffer-file-name)))))

(defun tkb-filename-to-registers-for-utplsql ()
  (interactive)
  (let* ((bfn (file-name-nondirectory (buffer-file-name)))
	 (bfnse (file-name-sans-extension bfn))
	 (exect (format "exec utplsql.test ('%s')" (substring bfnse 3))))
    (set-register ?f bfn)
    (set-register ?F bfnse)
    (set-register ?t exect)))

(global-set-key "\C-c#" 'query-replace-regexp)
(global-set-key "\C-cC" 'compile)
(global-set-key "\C-cf" 'tkb-insert-buffer-filename)
(global-set-key "\C-cF" 'tkb-insert-buffer-filename-sans-extension)
(global-set-key "\C-cg" 'goto-line)
(global-set-key "\C-ct" 'tkb-filename-to-registers-for-utplsql)

(setq require-final-newline 'ask)

(global-font-lock-mode 1)

;; Font and position.

(when nil 
  (concat "-outline-Bitstream Vera Sans Mono-normal-"
	  "r-normal-normal-11-110-96-96-c-*-iso10646-1")
  "-outline-Courier New-normal-r-normal-normal-11-82-96-96-c-*-iso10646-1"
  "-outline-Courier New-normal-r-normal-normal-11-82-96-96-c-*-iso10646-1")

(setq tkb-default-font
      "-outline-Courier New-normal-r-normal-normal-15-*-*-*-c-*-iso10646-1")

(setq default-frame-alist
      (append default-frame-alist
	      `((width . 80)
		(height . 55)
		(top . 10)
		(left . -10)
		(font . ,tkb-default-font))))
(setq default-frame-alist
      (append default-frame-alist
	      '((background-color . "black")
		(foreground-color . "green"))))


(when (and
       nil
       (not (eq system-type 'cygwin))
       (not (getenv "NO_CYGWIN_SHELL")))
  (defun my-shell-setup ()
    "For Cygwin bash under Emacs 20"
    (setq comint-scroll-show-maximum-output 'this)
    (setq comint-completion-addsuffix t)
    ;; (setq comint-process-echoes t) ;; reported that this is no longer needed
    (setq comint-eol-on-send t)
    (setq w32-quote-process-args ?\")
    (make-variable-buffer-local 'comint-completion-addsuffix))

  (setq shell-mode-hook 'my-shell-setup))

(when t
  ;; For the interactive shell
  (setq explicit-shell-file-name "c:/cygwin/bin/bash.exe")

  ;; For subprocesses invoked via the shell (e.g., "shell -c command")
  (setq shell-file-name "c:/cygwin/bin/bash.exe"))

(setq calendar-week-start-day 1)

(setq ispell-program-name "c:/cygwin/bin/aspell.exe")

(when-load-dir (dir "psgml-1.3.2")
  (autoload 'sgml-mode "psgml" "Major mode to edit SGML files." t)
  (autoload 'xml-mode "psgml" "Major mode to edit XML files." t)
  (push '("\\.html" . sgml-mode) auto-mode-alist)
  (push '("\\.sgml" . sgml-mode) auto-mode-alist)
  (push '("\\.xml" . xml-mode) auto-mode-alist)
  (setq sgml-catalog-files '("c:/cygwin/usr/share/opensp/html4.soc"))
  dir)

(when nil
  (load "rng-auto.el")
  (setq auto-mode-alist
        (cons '("\\.\\(xml\\|xsl\\|rng\\|xhtml\\)\\'" . nxml-mode)
	      auto-mode-alist)))

(when nil
    (setq auto-mode-alist
          (cons '("\\.ml[iylp]?$" . caml-mode) auto-mode-alist))
    (autoload 'caml-mode "caml" "Major mode for editing Caml code." t)
    (autoload 'run-caml "inf-caml" "Run an inferior Caml process." t))

(cond-load-dir
 (["caml" "caml-mode" "ocaml-mode"]
  (setq tkb-caml-keys t)
  (if (or window-system (fboundp 'facep)) (require 'caml-font))
  (autoload 'caml-mode "caml" "Major mode for editing Caml code." t)
  (autoload 'run-caml "inf-caml" "Run an inferior Caml process." t)
  (autoload 'camldebug "camldebug" "Run the Caml debugger" t)
  (push '("\\.ml[iylp]?$" . caml-mode) auto-mode-alist))
 ("tuareg-mode"
  (push "c:/emacs/emacs-21.3/site-lisp/tuareg-mode/" load-path)
  (setq auto-mode-alist (cons '("\\.ml\\w?" . tuareg-mode) auto-mode-alist))
  (autoload 'tuareg-mode "tuareg" "Major mode for editing Caml code" t)
  (autoload 'camldebug "camldebug" "Run the Caml debugger" t)
					;(setq tuareg-|-extra-unindent 0)
					;(setq tuareg-let-indent 2)
  (setq tuareg-in-indent 0)
  (setq tuareg-with-indent 0)
  (setq tuareg-rule-indent 0)
  (setq tuareg-parse-indent 0)
  (setq tuareg-match-indent 0)
  (setq tuareg-function-indent 0)))


(defun tkb-sql-hook ()
  (interactive)
  (setq indent-tabs-mode nil))

(add-hook 'sql-mode-hook 'tkb-sql-hook)
(add-hook 'pls-mode-hook 'tkb-sql-hook)
(add-hook 'plsql-mode-hook 'tkb-sql-hook)

(put 'narrow-to-region 'disabled nil)

;; c#
(when-available "c:/home/tkb/local/emacs/cc-mode-5.31" t)
(when-load-file "csharp-mode.el"
  (autoload 'csharp-mode "csharp-mode" "Major mode for editing C# code." t)
  (setq auto-mode-alist
	(append '(("\\.cs$" . csharp-mode)) auto-mode-alist)))


;;; experimental
(defun tkb-trim-buffer ()
  (interactive)
  (beginning-of-buffer)
  (save-excursion
    (while (re-search-forward "[ \t]+$" nil t)
      (replace-match "" nil nil))))
(global-set-key "\C-cT" 'tkb-trim-buffer)

(defun tkb-replace-with-calc (start end)
  (interactive "r\n")
  (let ((o (make-overlay start end)))
    (overlay-put o 'face 'highlight)
    (unwind-protect
	(let* ((n (string-to-number (buffer-substring start end)))
	       (x (read-from-minibuffer (format "Expression with n = %s: " n)
					nil read-expression-map t
					'read-expression-history
					)))
	  (kill-region start end)
	  (let ((r (number-to-string (eval x))))
	    (message "Result: %s" r)
	    (insert r)))
      (delete-overlay o))))
(global-set-key "\C-ce" 'tkb-replace-with-calc)


;;; C#, csharp

(defun tkb-csharp-mode-hook ()
  (setq c-basic-offset 4)
  (c-set-offset 'cpp-macro 0)
  (c-set-offset 'substatement-open 0)
  (setq show-trailing-whitespace t)
  (setq indent-tabs-mode nil)
  (setq indicate-empty-lines t)
  (c-toggle-hungry-state 1)
  )
(add-hook 'csharp-mode-hook 'tkb-csharp-mode-hook)

;;; end of .emacs.el
