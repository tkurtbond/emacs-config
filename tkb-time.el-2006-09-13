;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; tkb-time.el -- Time options
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; $ProjectHeader: tkbconfig 0.5 Tue, 09 May 2000 20:50:39 -0400 tkb $
;;; $Id: tkb-time.el 1.1 Sun, 26 Mar 2000 15:10:50 -0500 tkb $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Calendar
(setq calendar-week-start-day 1)
(setq calendar-longitude -80.1627)
(setq calendar-latitude 39.458)

(setq display-time-string-forms
      '(12-hours ":" minutes " " (downcase am-pm) (if mail " Mail") load))


(defun tkb-get-date-from-user ()
  (let ((date  (read-from-minibuffer
		"Date: " (format-time-string "%Y-%m-%d"))))
    (if (not (string-match
	      "\\([0-9]\\{4\\}\\)-\\([0-1][0-9]\\)-\\([0-3][0-9]\\)"
	      date))
	(error "invalid date: %s" date)
      (let ((year (string-to-int (match-string 1 date)))
	    (mon (string-to-int (match-string 2 date)))
	    (dom (string-to-int (match-string 3 date))))
	(encode-time 0 0 0 dom mon year)))))

(defun tkb-insert-date (prefix)
  (interactive "P")
  (let ((time (if prefix (tkb-get-date-from-user) (current-time))))
    (insert (tkb-timestamp nil time))))

(defun date ()
  (interactive)
  (message "Date: %s" (tkb-timestamp)))

(defun tkb-insert-iso-date (prefix)
  (interactive "P")
  (let ((time (if prefix (tkb-get-date-from-user) (current-time))))
    (insert (format-time-string "%Y/%2m/%2d" time))))
(when nil
  (global-set-key "\C-cd" 'tkb-insert-iso-date))

(defun tkb-insert-timestamp (&optional use-time)
  "Insert a timestamp to my liking."
  (interactive)
  (insert (tkb-timestamp use-time)))     ;Did have "Last modified: "

(defvar tkb-timestamp-format-regexp
  (concat "\\(monday\\|tuesday\\|wednesday\\|"
	  "thursday\\|friday\\|staturday\\|sunday\\)" ;the days
	  ",[ \t]+"
	  "[0-9]+"			;the day of the month
	  "[ \t]+"
	  "\\(january\\|february\\|march\\|april\\|may\\|june\\|july\\|"
	  "august\\|september\\|october\\|november\\|december\\)"
	  "[ \t]+"
	  "[0-9]+"
  "Regular expression that matches my prefered timestamp format."))

(defun tkb-replace-timestamp ()
  "Replace a timestamp if the text following point matches my preferred
timestamp format"
  (interactive)
  (cond ((looking-at tkb-timestamp-format-regexp)
	 (let* ((beg (match-beginning 0))
		(end (match-end 0))
		(origin (copy-marker beg nil)))
	 (delete-region beg end)
	 (tkb-insert-timestamp)
	 (goto-char origin)))))

(defun tkb-timestamp (&optional use-time time)
  "Return a timestamp to my liking.  Append clock time if USE-TIME is true.
If TIME is true, use it for the time to format."
  (let* ((time      (if time time (current-time)))
      (hhmm         (format-time-string "%I:%M %p" time))
      (dow          (format-time-string "%A" time))
      (day          (int-to-string (string-to-int
                         (format-time-string "%e" time))))
      (month   (format-time-string "%B" time))
      (year         (format-time-string "%Y" time))
      (result       (concat dow ", " day " " month " " year))
      )
    (if use-time
     (concat result " at " hhmm)
      result)))


;; diary
;; this causes the diary never to display, for some reason.
;(add-hook 'diary-display-hook 'appt-make-list)

(defconst tkb-date-regexp "\\(\\([A-Za-z]+\\), *\\([0-9]+\\) *\\([A-Za-z]+\\) *\\([0-9]+\\).*\\)")

(defun tkb-date-month-number (name)
  (let ((n (position name ["Jan" "Feb" "Mar" "Apr" "May" "Jun"
			   "Jul" "Aug" "Sep" "Oct" "Nov" "Dec"]
		     :test (function string-equal))))
    (if n
	(1+ n)
      n)))


;;; end of tkb-time.el
